{"ast":null,"code":"import _slicedToArray from \"/Users/tom/Desktop/interval-random/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tom/Desktop/interval-random/src/Components/Trade.jsx\";\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport moment from \"moment\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ALERT\":\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n}\n\nexport default function Trade() {\n  const inputRef = React.useRef();\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        alertReminders = _React$useState2[0],\n        setAlertReminders = _React$useState2[1];\n\n  const _React$useReducer = React.useReducer(reducer, []),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        alerts = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n  const addAlert = () => {\n    const input = inputRef.current;\n    const alertPrice = input.value;\n    setAlertReminders([...alertReminders, alertPrice]);\n  };\n\n  useEffect(() => {\n    var ws = new WebSocket(\"wss://api.bitfinex.com/ws\");\n\n    ws.onopen = function () {\n      ws.send(JSON.stringify({\n        event: \"subscribe\",\n        channel: \"trades\",\n        pair: \"tBTCUSD\"\n      }));\n    };\n\n    ws.onmessage = function (msg) {\n      var response = JSON.parse(msg.data);\n      var isAnOrder = response[1] === \"tu\";\n\n      if (isAnOrder) {\n        var time = moment().format(\"HH:mm:ss\");\n        const price = response[5].toFixed(1);\n        var amount = response[6].toFixed(5);\n        var alert = {\n          time,\n          price,\n          amount\n        };\n        alertReminders.forEach(p => {\n          console.log(price);\n          console.log(amount);\n\n          if (Math.abs(p - price) < 500) {\n            window.alert(\"HEY!\");\n          }\n        });\n        dispatch({\n          type: \"ADD_ALERT\",\n          payload: alert\n        });\n      }\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: inputRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addAlert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Add alert\"), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, alertReminders.map((alert, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, alert))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, alerts.map(({\n    time,\n    price,\n    amount\n  }, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Date \", time, \", Value \", price, \", Amount \", amount))))));\n}","map":{"version":3,"sources":["/Users/tom/Desktop/interval-random/src/Components/Trade.jsx"],"names":["React","useEffect","ReactDOM","moment","reducer","state","action","type","payload","Trade","inputRef","useRef","useState","alertReminders","setAlertReminders","useReducer","alerts","dispatch","addAlert","input","current","alertPrice","value","ws","WebSocket","onopen","send","JSON","stringify","event","channel","pair","onmessage","msg","response","parse","data","isAnOrder","time","format","price","toFixed","amount","alert","forEach","p","console","log","Math","abs","window","display","justifyContent","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport moment from \"moment\";\n\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ALERT\":\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}\n\nexport default function Trade() {\n\n  const inputRef = React.useRef();\n  const [alertReminders, setAlertReminders] = React.useState([]);\n  const [alerts, dispatch] = React.useReducer(reducer, []);\n\n    const addAlert = () => {\n    const input = inputRef.current;\n    const alertPrice = input.value;\n\n    setAlertReminders([...alertReminders, alertPrice]);\n\n  };\n\n  useEffect(() => {\n    var ws = new WebSocket(\"wss://api.bitfinex.com/ws\");\n\n    ws.onopen = function() {\n      ws.send(\n        JSON.stringify({\n          event: \"subscribe\",\n          channel: \"trades\",\n          pair: \"tBTCUSD\"\n        })\n      );\n    };\n\n\n    ws.onmessage = function(msg) {\n        var response = JSON.parse(msg.data);\n        var isAnOrder = response[1] === \"tu\";\n  \n        if (isAnOrder) {\n          var time = moment().format(\"HH:mm:ss\");\n  \n          const price = response[5].toFixed(1);\n          var amount = response[6].toFixed(5);\n  \n          var alert = { time, price, amount };\n         \n          alertReminders.forEach(p => {\n            console.log(price)\n            console.log(amount)\n            if (Math.abs(p - price) < 500) {\n              window.alert(\"HEY!\");\n            }\n          });\n  \n          dispatch({ type: \"ADD_ALERT\", payload: alert });\n        }\n      };\n    }, []);\n\n  return (\n    <div className=\"App\">\n      <input ref={inputRef} />\n\n      <button onClick={addAlert}>Add alert</button>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <ul>\n          {alertReminders.map((alert, i) => (\n            <li key={i}>{alert}</li>\n          ))}\n        </ul>\n        <ul>\n          {alerts.map(({ time, price, amount }, i) => (\n            <li key={i}>\n             \n             <p>\n                Date {time}, Value {price}, Amount {amount}\n              </p>\n            \n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}